#!/usr/bin/env ruby

require 'json'
require 'slop'
require 'encoding_estimator'

class ModelBuildTask
  attr_reader :directory, :language

  def initialize( directory, language )
    @directory = directory
    @language  = language
  end

  def validate!
    errors = [ validate_directory, validate_language ].reject { |e| e.nil? }
    print_errors errors if errors.any?
  end

  def self.parse( string )
    tokens = string.split '='
    if tokens.size == 2
      ModelBuildTask.new(tokens[1], tokens[0])
    else
      print_errors [ "Invalid argument: '#{string}'" ]
    end
  end

  private
  def self.print_errors( errors )
    STDERR.write "#{errors.join "\n"}"
    exit! 1
  end

  def validate_directory
    "Not a directory: '#{@directory}'." unless File.directory? @directory
  end

  def validate_language
    "Invalid language name (no two-letter-code): '#{@directory}'." unless @language.size == 2
  end
end

opts = Slop.parse do |o|
  o.float(
      '--threshold', '-t', 'Minimum character count threshold to include a char in the^ profile', default: 0.00001
  )
  o.bool(
      '--help', '-h', 'Display help'
  )
end


if ARGV.include?( '-h' ) || ARGV.include?( '--help' )
  puts "usage: #{$0} lang1=filepath1 ... langN=filepathN"
  exit! 0
end

configurations = opts.arguments.map { |arg| ModelBuildTask.parse(arg) }

configurations.each do |config|
  puts "Creating language file for #{config.language} from #{config.directory}..."

  runner = EncodingEstimator::ParallelModelBuilder.new config.directory, opts[:threshold]
  runner.execute!

  File.open("#{config.language}.json", 'w') { |f| f.write JSON.unparse(runner.results) }
end
