#!/usr/bin/env ruby

require 'json'
require 'slop'

# Get environment: development or production? -> Installed gem or current source dir
if ENV.key?( 'ENCEST_ENV' ) and ENV[ 'ENCEST_ENV' ] == 'development'
  require_relative '../lib/encoding_estimator'
else
  require 'encoding_estimator'
end


opts = Slop.parse do |o|
  o.array(
      '--encodings', '-e', 'Encodings to test (default: iso-8859-1,utf-16le,windows-1251)', default: %w(iso-8859-1 utf-16le windows-1251)
  )
  o.array(
      '--operations', '-o', 'Operations (enc/dec) to test (default: dec)',
      default: [EncodingEstimator::Conversion::Operation::DECODE]
  )
  o.array(
      '--languages', '-l', 'Language models to apply (default: en,de)', default: ['de', 'en']
  )
  o.integer(
       '--threads', '-t', 'Number of threads to use (0 to disable multithreading, default)', default: 0
  )
  o.bool(
      '--help', '-h', 'Display help'
  )
end

if opts[:help]
  puts opts
  puts (' ' * 4) + 'other arguments: files to parse'
  exit! 0
end

opts.arguments.each do |file|
  unless File.file? file
    puts "No such file: #{file}"
    exit! 1
  end
end

# Internal vs. external profiles
opts[:languages] = opts[:languages].map { |l| l.size == 2 ? l.to_sym : l }

# Multithreading: nil for 0
opts[:threads] = opts[:threads] == 0 ? nil : opts[:threads]

# Process every file
opts.arguments.each do |file|
  detection = EncodingEstimator.detect File.read(file ), {
                    languages:  opts[:languages],  encodings: opts[:encodings],
                    operations: opts[:operations], include_default: true,
                    num_cores:  opts[:threads]
  }

  puts "#{file}: #{detection.result.key}"
  detection.results.each { |r| puts "    #{r[:conversion].key}: #{r[:score]}" }
end
